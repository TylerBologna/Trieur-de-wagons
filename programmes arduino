Code pour le moteur pour le tapis roulant 



/* Example sketch to control a 28BYJ-48 stepper motor with ULN2003 driver board and Arduino UNO. More info: https://www.makerguides.com */
// Include the Arduino Stepper.h library:
#include <Stepper.h>
// Define number of steps per rotation:
const int stepsPerRevolution = 2048;
// Wiring:
// Pin 8 to IN1 on the ULN2003 driver
// Pin 9 to IN2 on the ULN2003 driver
// Pin 10 to IN3 on the ULN2003 driver
// Pin 11 to IN4 on the ULN2003 driver
// Create stepper object called 'myStepper', note the pin order:
Stepper myStepper = Stepper(stepsPerRevolution, 8, 10, 9, 11);
void setup() {
  // Set the speed to 5 rpm:
  myStepper.setSpeed(12);
  
  // Begin Serial communication at a baud rate of 9600:
  Serial.begin(9600);
}
void loop() {
  // Step one revolution in one direction:
  Serial.println("clockwise");
  myStepper.step(stepsPerRevolution);
  delay(500);
  
  // Step one revolution in the other direction:
  Serial.println("counterclockwise");
  myStepper.step(-stepsPerRevolution);
  delay(500);
}



code pour le servomoteur 

/* Sweep
 by BARRAGAN <http://barraganstudio.com>
 This example code is in the public domain.

 modified 8 Nov 2013
 by Scott Fitzgerald
 https://www.arduino.cc/en/Tutorial/LibraryExamples/Sweep
*/

#include <Servo.h>

Servo myservo;  // create servo object to control a servo
// twelve servo objects can be created on most boards

int pos = 0;    // variable to store the servo position

void setup() {
  myservo.attach(8);  // attaches the servo on pin 9 to the servo object
}

void loop() {
  for (pos = 0; pos <= 180; pos += 1) { // goes from 0 degrees to 180 degrees
    // in steps of 1 degree
    myservo.write(pos);              // tell servo to go to position in variable 'pos'
    delay(15);                       // waits 15 ms for the servo to reach the position
  }
  for (pos = 180; pos >= 0; pos -= 1) { // goes from 180 degrees to 0 degrees
    myservo.write(pos);              // tell servo to go to position in variable 'pos'
    delay(15);                       // waits 15 ms for the servo to reach the position
  }
}


ou bien



#include <Servo.h>

Servo servo;

void setup() {
  // put your setup code here, to run once:
  servo.attach(8);
  Serial.begin(9600);
  servo.write(0);

}

void loop() {
  // put your main code here, to run repeatedly:
  delay(2000);
  Serial.println("est ce que ca marche?");
  servo.write(90);
  delay(2000);
  servo.write(0);
  

}


programme tcs + servomoteur:


#include <Wire.h>
#include "Adafruit_TCS34725.h"
#include <NeuralNetwork.h>
#include <Servo.h>

#define ITER 4000
unsigned int couches[] = {3, 3, 1};
float *sorties;
NeuralNetwork NN(couches, 3);
const float entrees[6][3] = {
  {1.00, 0.00, 0.00}, //rouge
  {0.00, 1.00, 0.00}, //vert
  {0.00, 0.00, 1.00}, //bleu
  {1.00, 1.00, 0.00}, //jaune
  {0.00, 1.00, 1.00}, //cyan
  {1.00, 0.00, 1.00}, //magenta
};
const float sortiesAttendues[6][1] = {
  {1},//rouge
  {0},//vert
  {0},//bleu
  {1},//jaune
  {0},//cyan
  {1},//magenta
};


/* Example code for the Adafruit TCS34725 breakout library */

/* Connect SCL    to analog 5
   Connect SDA    to analog 4
   Connect VDD    to 3.3V DC
   Connect GROUND to common ground */

/* Initialise with default values (int time = 2.4ms, gain = 1x) */
// Adafruit_TCS34725 tcs = Adafruit_TCS34725();

/* Initialise with specific int time and gain values */
Adafruit_TCS34725 tcs = Adafruit_TCS34725(TCS34725_INTEGRATIONTIME_614MS, TCS34725_GAIN_1X);

uint16_t rmax, gmax, bmax, cmax, rmin, bmin, cmin, gmin;
Servo servo;

void setup(void) {
  Serial.begin(9600);
  servo.attach(8);

  if (tcs.begin()) {
    Serial.println("Found sensor");
  } else {
    Serial.println("No TCS34725 found ... check your connections");
    while (1);    
  }
  // Now we're ready to get readings!
  Serial.println("phase de calibration du blanc appuyer sur y quand c'est ok");
  while (Serial.read()!='y'){
    tcs.getRawData(&rmax, &gmax, &bmax, &cmax);
    Serial.print("R: ");Serial.print(rmax); Serial.print(" ");
    Serial.print("G: ");Serial.print(gmax); Serial.print(" ");
    Serial.print("B: ");Serial.print(bmax); Serial.print(" ");
    Serial.print("C: ");Serial.print(cmax); Serial.println(" ");
    delay(1000);
  }
  Serial.println("phase de calibration du noir appuyer sur y quand c'est ok");
  while (Serial.read()!='y'){
    tcs.getRawData(&rmin, &gmin, &bmin, &cmin);
    Serial.print("R: ");Serial.print(rmin); Serial.print(" ");
    Serial.print("G: ");Serial.print(gmin); Serial.print(" ");
    Serial.print("B: ");Serial.print(bmin); Serial.print(" ");
    Serial.print("C: ");Serial.print(cmin); Serial.println(" ");
    delay(1000);
  }

  for (int i = 0; i < ITER; i++) {
    for (int j = 0; j < 6; j++) {
      Serial.println(i);
      NN.FeedForward (entrees[j]);
      NN.BackProp (sortiesAttendues[j]);
    }
  }
  for (int i = 0; i < 6; i++) {
    sorties = NN.FeedForward(entrees[i]);
    Serial.print(i);
    Serial.print(": ");
    Serial.println(sorties[0], 7);
  }
  NN.print();
  
}

void loop(void) {
  uint16_t r, g, b, c;

  tcs.getRawData(&r, &g, &b, &c);
 
  int rmap = map(r, rmin, rmax,0, 255);
  int gmap = map(g, gmin, gmax,0, 255);
  int bmap = map(b, bmin, bmax,0, 255);
  int R = constrain(rmap,0,255);
  int G = constrain(gmap,0,255);
  int B = constrain(bmap,0,255);

  Serial.print("R: "); Serial.print(R, DEC); Serial.print(" ");
  Serial.print("G: "); Serial.print(G, DEC); Serial.print(" ");
  Serial.print("B: "); Serial.print(B, DEC); Serial.print(" ");
  Serial.println(" ");

  if ((R > 240)&&(B<150)&&(G<155)){
    Serial.println("wagon rouge");
    servo.write(90);
    delay(1000);
    servo.write(0);
  }
  
}

